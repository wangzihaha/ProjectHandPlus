// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game_proto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameProto {

  /// <summary>Holder for reflection information generated from game_proto.proto</summary>
  public static partial class GameProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for game_proto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBnYW1lX3Byb3RvLnByb3RvEglHYW1lUHJvdG8iKwoIUG9zaXRpb24SCQoB",
            "eBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIihwEKClBsYXllckluZm8S",
            "CwoDdWlkGAEgASgFEg8KB2FjY291bnQYAiABKAkSEAoIcGFzc3dvcmQYAyAB",
            "KAkSEAoIbmlja25hbWUYBCABKAkSDgoGcm9vbWlkGAUgASgFEhUKDWNoYXJh",
            "Y3Rlck5hbWUYBiABKAkSEAoIcHJlcGFyZWQYByABKAgiZgoLUGxheWVyU3Rh",
            "dGUSCwoDZmlkGAEgASgFEgwKBG5hbWUYAiABKAkSCwoDeWF3GAMgASgCEiAK",
            "A3BvcxgEIAEoCzITLkdhbWVQcm90by5Qb3NpdGlvbhINCgVzdGF0ZRgFIAEo",
            "BSKmAQoLUGxheWVySW5wdXQSCwoDdWlkGAEgASgFEhQKDGhlYWRUb3dhcmRz",
            "WBgCIAEoAxIUCgxoZWFkVG93YXJkc1kYAyABKAMSFAoMaGVhZFRvd2FyZHNa",
            "GAQgASgDEhYKDm1vdmVEaXJlY3Rpb25YGAUgASgDEhYKDm1vdmVEaXJlY3Rp",
            "b25ZGAYgASgDEhgKEHVzZVByb3BzSW5QYWNrSUQYByABKAUi2AEKCFJvb21J",
            "bmZvEgoKAmlkGAEgASgFEhEKCXJvdW5kVGltZRgCIAEoBRITCgtyb3VuZE51",
            "bWJlchgDIAEoBRIQCghyb29tTmFtZRgEIAEoCRIPCgdtYXBOYW1lGAUgASgJ",
            "EhAKCHBhc3N3b3JkGAYgASgJEhIKCm1heFBsYXllcnMYByABKAUSFwoPY3Vy",
            "UGxheWVyTnVtYmVyGAggASgFEiYKB1BsYXllcnMYCSADKAsyFS5HYW1lUHJv",
            "dG8uUGxheWVySW5mbxIOCgZtYXN0ZXIYCiABKAUirgEKCUNsaWVudE1zZxIo",
            "CgR0eXBlGAEgASgOMhouR2FtZVByb3RvLkNsaWVudEV2ZW50Q29kZRIpCgpw",
            "bGF5ZXJpbmZvGAIgASgLMhUuR2FtZVByb3RvLlBsYXllckluZm8SJQoFaW5w",
            "dXQYAyABKAsyFi5HYW1lUHJvdG8uUGxheWVySW5wdXQSJQoIcm9vbWluZm8Y",
            "BCABKAsyEy5HYW1lUHJvdG8uUm9vbUluZm8inAIKCVNlcnZlck1zZxIoCgR0",
            "eXBlGAEgASgOMhouR2FtZVByb3RvLlNlcnZlckV2ZW50Q29kZRILCgNmaWQY",
            "AiABKAUSCwoDc3RyGAMgASgJEgoKAmlwGAQgASgJEgwKBHBvcnQYBSABKAUS",
            "KQoKcGxheWVySW5mbxgGIAEoCzIVLkdhbWVQcm90by5QbGF5ZXJJbmZvEg4K",
            "BmZyYW1JRBgHIAEoBRImCgZpbnB1dHMYCCADKAsyFi5HYW1lUHJvdG8uUGxh",
            "eWVySW5wdXQSJgoGc3RhdGVzGAkgAygLMhYuR2FtZVByb3RvLlBsYXllclN0",
            "YXRlEiYKCXJvb21pbmZvcxgKIAMoCzITLkdhbWVQcm90by5Sb29tSW5mbyqg",
            "BAoPU2VydmVyRXZlbnRDb2RlEhAKDExvZ0luU3VjY2VzcxAAEhMKD1JlZ2lz",
            "dGVyU3VjY2VzcxABEhQKEEVudGVyUm9vbVN1Y2Nlc3MQAhIfChtMb2dJbkVy",
            "cm9yX0FjY291bnREb250RXhpc3QQAxIcChhMb2dJbkVycm9yX1Bhc3N3b3Jk",
            "V3JvbmcQBBIWChJMb2dJbkVycm9yX1JlTG9nSW4QBRIlCiFSZWdpc3RlckVy",
            "cm9yX0FjY291bnRBbHJlYWR5RXhpc3QQBhIcChhFbnRlclJvb21FcnJvcl9E",
            "b250TG9nSW4QBxIdChlFbnRlclJvb21FcnJvcl9Sb29tSXNGdWxsEAgSHwob",
            "RW50ZXJSb29tRXJyb3JfUm9vbURvbnRFeGl0EAkSEQoNSW50ZXJuYWxFcnJv",
            "chAKEhUKEUJyb2FkUm9vbUxpc3RJbmZvEAsSEQoNQnJvYWRSb29tSW5mbxAM",
            "EhYKEkp1bXBUb0JhdHRsZVNlcnZlchANEgsKB1MyQ1N5bmMQDhITCg9FeGl0",
            "Um9vbVN1Y2Nlc3MQDxIbChdFeGl0Um9vbUVycm9yX0RvbnRMb2dJbhAQEh0K",
            "GUV4aXRSb29tRXJyb3JfUm9vbUlzRW1wdHkQERIVChFDcmVhdGVSb29tU3Vj",
            "Y2VzcxASEhQKEFN0YXJ0R2FtZUZhaWx1cmUQExIUChBTdGFydEdhbWVTdWNj",
            "ZXNzEBQqlAEKD0NsaWVudEV2ZW50Q29kZRIJCgVMb2dJbhAAEgoKBlJlZ2lz",
            "dBABEg4KCkNyZWF0ZVJvb20QAhINCglFbnRlclJvb20QAxIMCghFeGl0Um9v",
            "bRAEEgsKB0MyU1N5bmMQBRIKCgZGb2xsb3cQBhIVChFDaGFuZ2VTdGF0ZUlu",
            "Um9vbRAHEg0KCVN0YXJ0R2FtZRAIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameProto.ServerEventCode), typeof(global::GameProto.ClientEventCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Position), global::GameProto.Position.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerInfo), global::GameProto.PlayerInfo.Parser, new[]{ "Uid", "Account", "Password", "Nickname", "Roomid", "CharacterName", "Prepared" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerState), global::GameProto.PlayerState.Parser, new[]{ "Fid", "Name", "Yaw", "Pos", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.PlayerInput), global::GameProto.PlayerInput.Parser, new[]{ "Uid", "HeadTowardsX", "HeadTowardsY", "HeadTowardsZ", "MoveDirectionX", "MoveDirectionY", "UsePropsInPackID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.RoomInfo), global::GameProto.RoomInfo.Parser, new[]{ "Id", "RoundTime", "RoundNumber", "RoomName", "MapName", "Password", "MaxPlayers", "CurPlayerNumber", "Players", "Master" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.ClientMsg), global::GameProto.ClientMsg.Parser, new[]{ "Type", "Playerinfo", "Input", "Roominfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.ServerMsg), global::GameProto.ServerMsg.Parser, new[]{ "Type", "Fid", "Str", "Ip", "Port", "PlayerInfo", "FramID", "Inputs", "States", "Roominfos" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///S2C事件码
  /// </summary>
  public enum ServerEventCode {
    [pbr::OriginalName("LogInSuccess")] LogInSuccess = 0,
    [pbr::OriginalName("RegisterSuccess")] RegisterSuccess = 1,
    [pbr::OriginalName("EnterRoomSuccess")] EnterRoomSuccess = 2,
    [pbr::OriginalName("LogInError_AccountDontExist")] LogInErrorAccountDontExist = 3,
    [pbr::OriginalName("LogInError_PasswordWrong")] LogInErrorPasswordWrong = 4,
    [pbr::OriginalName("LogInError_ReLogIn")] LogInErrorReLogIn = 5,
    [pbr::OriginalName("RegisterError_AccountAlreadyExist")] RegisterErrorAccountAlreadyExist = 6,
    [pbr::OriginalName("EnterRoomError_DontLogIn")] EnterRoomErrorDontLogIn = 7,
    [pbr::OriginalName("EnterRoomError_RoomIsFull")] EnterRoomErrorRoomIsFull = 8,
    [pbr::OriginalName("EnterRoomError_RoomDontExit")] EnterRoomErrorRoomDontExit = 9,
    [pbr::OriginalName("InternalError")] InternalError = 10,
    [pbr::OriginalName("BroadRoomListInfo")] BroadRoomListInfo = 11,
    [pbr::OriginalName("BroadRoomInfo")] BroadRoomInfo = 12,
    [pbr::OriginalName("JumpToBattleServer")] JumpToBattleServer = 13,
    [pbr::OriginalName("S2CSync")] S2Csync = 14,
    [pbr::OriginalName("ExitRoomSuccess")] ExitRoomSuccess = 15,
    [pbr::OriginalName("ExitRoomError_DontLogIn")] ExitRoomErrorDontLogIn = 16,
    [pbr::OriginalName("ExitRoomError_RoomIsEmpty")] ExitRoomErrorRoomIsEmpty = 17,
    [pbr::OriginalName("CreateRoomSuccess")] CreateRoomSuccess = 18,
    [pbr::OriginalName("StartGameFailure")] StartGameFailure = 19,
    [pbr::OriginalName("StartGameSuccess")] StartGameSuccess = 20,
  }

  /// <summary>
  ///C2S事件码
  /// </summary>
  public enum ClientEventCode {
    [pbr::OriginalName("LogIn")] LogIn = 0,
    [pbr::OriginalName("Regist")] Regist = 1,
    [pbr::OriginalName("CreateRoom")] CreateRoom = 2,
    [pbr::OriginalName("EnterRoom")] EnterRoom = 3,
    [pbr::OriginalName("ExitRoom")] ExitRoom = 4,
    [pbr::OriginalName("C2SSync")] C2Ssync = 5,
    [pbr::OriginalName("Follow")] Follow = 6,
    [pbr::OriginalName("ChangeStateInRoom")] ChangeStateInRoom = 7,
    [pbr::OriginalName("StartGame")] StartGame = 8,
  }

  #endregion

  #region Messages
  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家信息
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      uid_ = other.uid_;
      account_ = other.account_;
      password_ = other.password_;
      nickname_ = other.nickname_;
      roomid_ = other.roomid_;
      characterName_ = other.characterName_;
      prepared_ = other.prepared_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 4;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 5;
    private int roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "characterName" field.</summary>
    public const int CharacterNameFieldNumber = 6;
    private string characterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharacterName {
      get { return characterName_; }
      set {
        characterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prepared" field.</summary>
    public const int PreparedFieldNumber = 7;
    private bool prepared_;
    /// <summary>
    ///后续添加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Prepared {
      get { return prepared_; }
      set {
        prepared_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (Nickname != other.Nickname) return false;
      if (Roomid != other.Roomid) return false;
      if (CharacterName != other.CharacterName) return false;
      if (Prepared != other.Prepared) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Roomid != 0) hash ^= Roomid.GetHashCode();
      if (CharacterName.Length != 0) hash ^= CharacterName.GetHashCode();
      if (Prepared != false) hash ^= Prepared.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nickname);
      }
      if (Roomid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Roomid);
      }
      if (CharacterName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CharacterName);
      }
      if (Prepared != false) {
        output.WriteRawTag(56);
        output.WriteBool(Prepared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Roomid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roomid);
      }
      if (CharacterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterName);
      }
      if (Prepared != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Roomid != 0) {
        Roomid = other.Roomid;
      }
      if (other.CharacterName.Length != 0) {
        CharacterName = other.CharacterName;
      }
      if (other.Prepared != false) {
        Prepared = other.Prepared;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Nickname = input.ReadString();
            break;
          }
          case 40: {
            Roomid = input.ReadInt32();
            break;
          }
          case 50: {
            CharacterName = input.ReadString();
            break;
          }
          case 56: {
            Prepared = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家状态
  /// </summary>
  public sealed partial class PlayerState : pb::IMessage<PlayerState> {
    private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState(PlayerState other) : this() {
      fid_ = other.fid_;
      name_ = other.name_;
      yaw_ = other.yaw_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState Clone() {
      return new PlayerState(this);
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 1;
    private int fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fid {
      get { return fid_; }
      set {
        fid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 3;
    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::GameProto.Position pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Position Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fid != other.Fid) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fid != 0) hash ^= Fid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Yaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Fid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Yaw);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Fid != 0) {
        Fid = other.Fid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::GameProto.Position();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Yaw = input.ReadFloat();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::GameProto.Position();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家一次操作
  /// </summary>
  public sealed partial class PlayerInput : pb::IMessage<PlayerInput> {
    private static readonly pb::MessageParser<PlayerInput> _parser = new pb::MessageParser<PlayerInput>(() => new PlayerInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput(PlayerInput other) : this() {
      uid_ = other.uid_;
      headTowardsX_ = other.headTowardsX_;
      headTowardsY_ = other.headTowardsY_;
      headTowardsZ_ = other.headTowardsZ_;
      moveDirectionX_ = other.moveDirectionX_;
      moveDirectionY_ = other.moveDirectionY_;
      usePropsInPackID_ = other.usePropsInPackID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput Clone() {
      return new PlayerInput(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "headTowardsX" field.</summary>
    public const int HeadTowardsXFieldNumber = 2;
    private long headTowardsX_;
    /// <summary>
    ///玩家头(视角)朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeadTowardsX {
      get { return headTowardsX_; }
      set {
        headTowardsX_ = value;
      }
    }

    /// <summary>Field number for the "headTowardsY" field.</summary>
    public const int HeadTowardsYFieldNumber = 3;
    private long headTowardsY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeadTowardsY {
      get { return headTowardsY_; }
      set {
        headTowardsY_ = value;
      }
    }

    /// <summary>Field number for the "headTowardsZ" field.</summary>
    public const int HeadTowardsZFieldNumber = 4;
    private long headTowardsZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeadTowardsZ {
      get { return headTowardsZ_; }
      set {
        headTowardsZ_ = value;
      }
    }

    /// <summary>Field number for the "moveDirectionX" field.</summary>
    public const int MoveDirectionXFieldNumber = 5;
    private long moveDirectionX_;
    /// <summary>
    ///玩家移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MoveDirectionX {
      get { return moveDirectionX_; }
      set {
        moveDirectionX_ = value;
      }
    }

    /// <summary>Field number for the "moveDirectionY" field.</summary>
    public const int MoveDirectionYFieldNumber = 6;
    private long moveDirectionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MoveDirectionY {
      get { return moveDirectionY_; }
      set {
        moveDirectionY_ = value;
      }
    }

    /// <summary>Field number for the "usePropsInPackID" field.</summary>
    public const int UsePropsInPackIDFieldNumber = 7;
    private int usePropsInPackID_;
    /// <summary>
    ///使用的道具在背包中的ID   技能也是道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsePropsInPackID {
      get { return usePropsInPackID_; }
      set {
        usePropsInPackID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (HeadTowardsX != other.HeadTowardsX) return false;
      if (HeadTowardsY != other.HeadTowardsY) return false;
      if (HeadTowardsZ != other.HeadTowardsZ) return false;
      if (MoveDirectionX != other.MoveDirectionX) return false;
      if (MoveDirectionY != other.MoveDirectionY) return false;
      if (UsePropsInPackID != other.UsePropsInPackID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (HeadTowardsX != 0L) hash ^= HeadTowardsX.GetHashCode();
      if (HeadTowardsY != 0L) hash ^= HeadTowardsY.GetHashCode();
      if (HeadTowardsZ != 0L) hash ^= HeadTowardsZ.GetHashCode();
      if (MoveDirectionX != 0L) hash ^= MoveDirectionX.GetHashCode();
      if (MoveDirectionY != 0L) hash ^= MoveDirectionY.GetHashCode();
      if (UsePropsInPackID != 0) hash ^= UsePropsInPackID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (HeadTowardsX != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HeadTowardsX);
      }
      if (HeadTowardsY != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(HeadTowardsY);
      }
      if (HeadTowardsZ != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(HeadTowardsZ);
      }
      if (MoveDirectionX != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MoveDirectionX);
      }
      if (MoveDirectionY != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MoveDirectionY);
      }
      if (UsePropsInPackID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UsePropsInPackID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (HeadTowardsX != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeadTowardsX);
      }
      if (HeadTowardsY != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeadTowardsY);
      }
      if (HeadTowardsZ != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeadTowardsZ);
      }
      if (MoveDirectionX != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MoveDirectionX);
      }
      if (MoveDirectionY != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MoveDirectionY);
      }
      if (UsePropsInPackID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsePropsInPackID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInput other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.HeadTowardsX != 0L) {
        HeadTowardsX = other.HeadTowardsX;
      }
      if (other.HeadTowardsY != 0L) {
        HeadTowardsY = other.HeadTowardsY;
      }
      if (other.HeadTowardsZ != 0L) {
        HeadTowardsZ = other.HeadTowardsZ;
      }
      if (other.MoveDirectionX != 0L) {
        MoveDirectionX = other.MoveDirectionX;
      }
      if (other.MoveDirectionY != 0L) {
        MoveDirectionY = other.MoveDirectionY;
      }
      if (other.UsePropsInPackID != 0) {
        UsePropsInPackID = other.UsePropsInPackID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            HeadTowardsX = input.ReadInt64();
            break;
          }
          case 24: {
            HeadTowardsY = input.ReadInt64();
            break;
          }
          case 32: {
            HeadTowardsZ = input.ReadInt64();
            break;
          }
          case 40: {
            MoveDirectionX = input.ReadInt64();
            break;
          }
          case 48: {
            MoveDirectionY = input.ReadInt64();
            break;
          }
          case 56: {
            UsePropsInPackID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间信息
  ///房间id 
  ///每局时间
  ///局数
  ///地图名
  ///房间密码
  ///最大玩家数量
  ///准备中的玩家
  ///未准备的玩家
  ///房主
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      id_ = other.id_;
      roundTime_ = other.roundTime_;
      roundNumber_ = other.roundNumber_;
      roomName_ = other.roomName_;
      mapName_ = other.mapName_;
      password_ = other.password_;
      maxPlayers_ = other.maxPlayers_;
      curPlayerNumber_ = other.curPlayerNumber_;
      players_ = other.players_.Clone();
      master_ = other.master_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "roundTime" field.</summary>
    public const int RoundTimeFieldNumber = 2;
    private int roundTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundTime {
      get { return roundTime_; }
      set {
        roundTime_ = value;
      }
    }

    /// <summary>Field number for the "roundNumber" field.</summary>
    public const int RoundNumberFieldNumber = 3;
    private int roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 4;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapName" field.</summary>
    public const int MapNameFieldNumber = 5;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 6;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxPlayers" field.</summary>
    public const int MaxPlayersFieldNumber = 7;
    private int maxPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "curPlayerNumber" field.</summary>
    public const int CurPlayerNumberFieldNumber = 8;
    private int curPlayerNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurPlayerNumber {
      get { return curPlayerNumber_; }
      set {
        curPlayerNumber_ = value;
      }
    }

    /// <summary>Field number for the "Players" field.</summary>
    public const int PlayersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::GameProto.PlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(74, global::GameProto.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::GameProto.PlayerInfo> players_ = new pbc::RepeatedField<global::GameProto.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.PlayerInfo> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "master" field.</summary>
    public const int MasterFieldNumber = 10;
    private int master_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Master {
      get { return master_; }
      set {
        master_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RoundTime != other.RoundTime) return false;
      if (RoundNumber != other.RoundNumber) return false;
      if (RoomName != other.RoomName) return false;
      if (MapName != other.MapName) return false;
      if (Password != other.Password) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (CurPlayerNumber != other.CurPlayerNumber) return false;
      if(!players_.Equals(other.players_)) return false;
      if (Master != other.Master) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (RoundTime != 0) hash ^= RoundTime.GetHashCode();
      if (RoundNumber != 0) hash ^= RoundNumber.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      if (CurPlayerNumber != 0) hash ^= CurPlayerNumber.GetHashCode();
      hash ^= players_.GetHashCode();
      if (Master != 0) hash ^= Master.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (RoundTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoundTime);
      }
      if (RoundNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoundNumber);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (MapName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MapName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Password);
      }
      if (MaxPlayers != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxPlayers);
      }
      if (CurPlayerNumber != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurPlayerNumber);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (Master != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Master);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (RoundTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundTime);
      }
      if (RoundNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundNumber);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayers);
      }
      if (CurPlayerNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurPlayerNumber);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (Master != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Master);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.RoundTime != 0) {
        RoundTime = other.RoundTime;
      }
      if (other.RoundNumber != 0) {
        RoundNumber = other.RoundNumber;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.CurPlayerNumber != 0) {
        CurPlayerNumber = other.CurPlayerNumber;
      }
      players_.Add(other.players_);
      if (other.Master != 0) {
        Master = other.Master;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            RoundTime = input.ReadInt32();
            break;
          }
          case 24: {
            RoundNumber = input.ReadInt32();
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            MapName = input.ReadString();
            break;
          }
          case 50: {
            Password = input.ReadString();
            break;
          }
          case 56: {
            MaxPlayers = input.ReadInt32();
            break;
          }
          case 64: {
            CurPlayerNumber = input.ReadInt32();
            break;
          }
          case 74: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 80: {
            Master = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端数据包
  ///登录：type=LogIn,playerinfo(account, password)
  ///注册：type=Regist,playerinfo(account, password, nickname)
  ///进房间：type=EnterRoom, playerInfo(uid),id=room_id
  ///选择角色: type=SelectCharacter, playerInfo(uid, characterId)
  ///同步：type=Sync,input
  ///追帧：type=Follow, playerinfo(uid),id=fid
  /// </summary>
  public sealed partial class ClientMsg : pb::IMessage<ClientMsg> {
    private static readonly pb::MessageParser<ClientMsg> _parser = new pb::MessageParser<ClientMsg>(() => new ClientMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg(ClientMsg other) : this() {
      type_ = other.type_;
      Playerinfo = other.playerinfo_ != null ? other.Playerinfo.Clone() : null;
      Input = other.input_ != null ? other.Input.Clone() : null;
      Roominfo = other.roominfo_ != null ? other.Roominfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg Clone() {
      return new ClientMsg(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.ClientEventCode type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ClientEventCode Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "playerinfo" field.</summary>
    public const int PlayerinfoFieldNumber = 2;
    private global::GameProto.PlayerInfo playerinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.PlayerInfo Playerinfo {
      get { return playerinfo_; }
      set {
        playerinfo_ = value;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 3;
    private global::GameProto.PlayerInput input_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.PlayerInput Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "roominfo" field.</summary>
    public const int RoominfoFieldNumber = 4;
    private global::GameProto.RoomInfo roominfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.RoomInfo Roominfo {
      get { return roominfo_; }
      set {
        roominfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Playerinfo, other.Playerinfo)) return false;
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Roominfo, other.Roominfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (playerinfo_ != null) hash ^= Playerinfo.GetHashCode();
      if (input_ != null) hash ^= Input.GetHashCode();
      if (roominfo_ != null) hash ^= Roominfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (playerinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Playerinfo);
      }
      if (input_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Input);
      }
      if (roominfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Roominfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (playerinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Playerinfo);
      }
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (roominfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roominfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientMsg other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.playerinfo_ != null) {
        if (playerinfo_ == null) {
          playerinfo_ = new global::GameProto.PlayerInfo();
        }
        Playerinfo.MergeFrom(other.Playerinfo);
      }
      if (other.input_ != null) {
        if (input_ == null) {
          input_ = new global::GameProto.PlayerInput();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.roominfo_ != null) {
        if (roominfo_ == null) {
          roominfo_ = new global::GameProto.RoomInfo();
        }
        Roominfo.MergeFrom(other.Roominfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.ClientEventCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (playerinfo_ == null) {
              playerinfo_ = new global::GameProto.PlayerInfo();
            }
            input.ReadMessage(playerinfo_);
            break;
          }
          case 26: {
            if (input_ == null) {
              input_ = new global::GameProto.PlayerInput();
            }
            input.ReadMessage(input_);
            break;
          }
          case 34: {
            if (roominfo_ == null) {
              roominfo_ = new global::GameProto.RoomInfo();
            }
            input.ReadMessage(roominfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器数据包
  ///登录成功：type = LogInSuccess playerinfo(), roominfos
  ///注册成功：type = RegistSuccess 
  ///进房间成功：type = EnterRoomSuccess, roominfos
  ///登录，注册，进房间失败：type=Failure,str
  ///跳转服务器: type=JumpToBattleServer,str=ip:port
  ///同步：type = Sync,fid,inputs,(states?)
  /// </summary>
  public sealed partial class ServerMsg : pb::IMessage<ServerMsg> {
    private static readonly pb::MessageParser<ServerMsg> _parser = new pb::MessageParser<ServerMsg>(() => new ServerMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg(ServerMsg other) : this() {
      type_ = other.type_;
      fid_ = other.fid_;
      str_ = other.str_;
      ip_ = other.ip_;
      port_ = other.port_;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      framID_ = other.framID_;
      inputs_ = other.inputs_.Clone();
      states_ = other.states_.Clone();
      roominfos_ = other.roominfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg Clone() {
      return new ServerMsg(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.ServerEventCode type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ServerEventCode Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 2;
    private int fid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fid {
      get { return fid_; }
      set {
        fid_ = value;
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 3;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 4;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 6;
    private global::GameProto.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "framID" field.</summary>
    public const int FramIDFieldNumber = 7;
    private int framID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramID {
      get { return framID_; }
      set {
        framID_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::GameProto.PlayerInput> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(66, global::GameProto.PlayerInput.Parser);
    private readonly pbc::RepeatedField<global::GameProto.PlayerInput> inputs_ = new pbc::RepeatedField<global::GameProto.PlayerInput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.PlayerInput> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::GameProto.PlayerState> _repeated_states_codec
        = pb::FieldCodec.ForMessage(74, global::GameProto.PlayerState.Parser);
    private readonly pbc::RepeatedField<global::GameProto.PlayerState> states_ = new pbc::RepeatedField<global::GameProto.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.PlayerState> States {
      get { return states_; }
    }

    /// <summary>Field number for the "roominfos" field.</summary>
    public const int RoominfosFieldNumber = 10;
    private static readonly pb::FieldCodec<global::GameProto.RoomInfo> _repeated_roominfos_codec
        = pb::FieldCodec.ForMessage(82, global::GameProto.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::GameProto.RoomInfo> roominfos_ = new pbc::RepeatedField<global::GameProto.RoomInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.RoomInfo> Roominfos {
      get { return roominfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Fid != other.Fid) return false;
      if (Str != other.Str) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (FramID != other.FramID) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!states_.Equals(other.states_)) return false;
      if(!roominfos_.Equals(other.roominfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Fid != 0) hash ^= Fid.GetHashCode();
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (FramID != 0) hash ^= FramID.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= states_.GetHashCode();
      hash ^= roominfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Fid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Fid);
      }
      if (Str.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Str);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Port);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerInfo);
      }
      if (FramID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FramID);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      states_.WriteTo(output, _repeated_states_codec);
      roominfos_.WriteTo(output, _repeated_roominfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Fid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fid);
      }
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (FramID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramID);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += states_.CalculateSize(_repeated_states_codec);
      size += roominfos_.CalculateSize(_repeated_roominfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerMsg other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Fid != 0) {
        Fid = other.Fid;
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::GameProto.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.FramID != 0) {
        FramID = other.FramID;
      }
      inputs_.Add(other.inputs_);
      states_.Add(other.states_);
      roominfos_.Add(other.roominfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.ServerEventCode) input.ReadEnum();
            break;
          }
          case 16: {
            Fid = input.ReadInt32();
            break;
          }
          case 26: {
            Str = input.ReadString();
            break;
          }
          case 34: {
            Ip = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadInt32();
            break;
          }
          case 50: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::GameProto.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 56: {
            FramID = input.ReadInt32();
            break;
          }
          case 66: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 74: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
          case 82: {
            roominfos_.AddEntriesFrom(input, _repeated_roominfos_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
